import asyncio
import logging
import sqlite3
import pytz
import os
from datetime import datetime, timedelta
from pathlib import Path
from fastapi import FastAPI  # –ü–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç —Å—é–¥–∞!
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from dotenv import load_dotenv

ACTIVE_COURIERS_FILE = 'active_couriers.txt'
TIME_ZONE = pytz.timezone('Europe/Moscow')

load_dotenv() 

API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
SECRET_PASSWORD = os.getenv('SECRET_PASSWORD')
ADMIN_PASSWORD = os.getenv('ADMIN_PASSWORD')

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

class Form(StatesGroup):
    previous_state = State()
    role = State()
    courier_password = State()
    restaurant_password = State()
    admin_password = State()
    tariff = State()
    restaurant_name = State()
    time = State()
    packages = State()
    distance = State()
    add_to_existing = State()
    courier_name = State() 

conn = sqlite3.connect('restaurants.db', check_same_thread=False)

conn.execute('''CREATE TABLE IF NOT EXISTS restaurants
             (user_id INTEGER PRIMARY KEY,
              name TEXT,
              tariff TEXT,
              registration_date TEXT)''')

conn.execute('''CREATE TABLE IF NOT EXISTS couriers
             (user_id INTEGER PRIMARY KEY,
              name TEXT,
              registration_date TEXT)''')

conn.execute('''CREATE TABLE IF NOT EXISTS blocked_couriers
             (user_id INTEGER PRIMARY KEY)''')
conn.commit()

pending_updates = {}

def get_blocked_couriers():
    try:
        return [int(line) for line in file_operation('blocked_couriers.txt', 'r').splitlines() if line]
    except:
        return []

def add_blocked_courier(courier_id: int):
    blocked = get_blocked_couriers()
    if courier_id not in blocked:
        file_operation('blocked_couriers.txt', 'a', courier_id)

def file_operation(filename: str, mode: str, data=None):
    try:
        Path(filename).touch(exist_ok=True)
        with open(filename, mode, encoding='utf-8') as f:
            if mode == 'r':
                return f.read().strip()
            if mode == 'a':
                f.write(f"{data}\n")
            if mode == 'w':
                f.seek(0)
                f.truncate()
                f.write(str(data))
        return ''
    except Exception as e:
        logger.error(f"File error ({filename}): {e}")
        return ''

def get_couriers():
    try:
        return [int(line) for line in file_operation('courier_id.txt', 'r').splitlines() if line]
    except:
        return []

def get_active_couriers():
    try:
        return [int(line) for line in file_operation(ACTIVE_COURIERS_FILE, 'r').splitlines() if line]
    except:
        return []

def add_active_courier(courier_id: int):
    active = get_active_couriers()
    if courier_id not in active:
        active.append(courier_id)
        file_operation(ACTIVE_COURIERS_FILE, 'w', '\n'.join(map(str, active)))
        file_operation('courier_index.txt', 'w', 0)

def remove_active_courier(courier_id: int):
    active = get_active_couriers()
    if courier_id in active:
        active.remove(courier_id)
        file_operation(ACTIVE_COURIERS_FILE, 'w', '\n'.join(map(str, active)))
        file_operation('courier_index.txt', 'w', 0)

def next_courier():
    couriers = get_active_couriers()
    if not couriers:
        return None
    try:
        idx = int(file_operation('courier_index.txt', 'r') or 0)
        idx = idx % len(couriers)
    except ValueError:
        idx = 0
    current = couriers[idx]
    new_idx = (idx + 1) % len(couriers)
    file_operation('courier_index.txt', 'w', new_idx)
    return current

def order_id_generator():
    try:
        counter = int(file_operation('order_counter.txt', 'r') or 0)
    except ValueError:
        counter = 0
    counter += 1
    file_operation('order_counter.txt', 'w', counter)
    return f"–ó–∞–∫–∞–∑ #{counter}"

async def save_order(order_data: dict):
    try:
        current_time = datetime.now(TIME_ZONE)
        with open('orders.txt', 'a', encoding='utf-8') as f:
            f.write(
                f"{order_data['id']}|{order_data['user_id']}|{order_data['restaurant']}|"
                f"{order_data['time']}|{order_data['packages']}|{', '.join(order_data['distances'])}|"
                f"{order_data['price']}|pending|"
                f"{current_time.strftime('%Y-%m-%d')}|"
                f"{current_time.strftime('%H:%M:%S')}|None\n"
            )
    except Exception as e:
        logger.error(f"Order save error: {e}")

async def update_order_status(order_id: str, new_status: str, courier_id: int = None):
    try:
        with open('orders.txt', 'r+', encoding='utf-8') as f:
            lines = []
            for line in f:
                if line.startswith(f"{order_id}|"):
                    parts = line.strip().split('|')
                    while len(parts) < 11:
                        parts.append('None')
                    parts[7] = new_status
                    if courier_id:
                        parts[10] = str(courier_id)
                    line = '|'.join(parts) + '\n'
                lines.append(line)
            f.seek(0)
            f.writelines(lines)
            f.truncate()
    except Exception as e:
        logger.error(f"Order update error: {e}")

async def send_to_courier(order: dict, keyboard: InlineKeyboardMarkup):
    courier_id = next_courier()
    if courier_id:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—ã–ª–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞
            with open('orders.txt', 'r', encoding='utf-8') as f:
                for line in f:
                    if line.startswith(f"{order['id']}|"):
                        parts = line.strip().split('|')
                        actual_packages = parts[4] if len(parts) > 4 else order['packages']
                        break
                else:
                    actual_packages = order['packages']

            await bot.send_message(
                courier_id,
                f"üöö –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ {order['id']}!\n"
                f"üè¢ {order['restaurant']}\n"
                f"‚è∞ {order['time']}\n"
                f"üì¶ {actual_packages} –ø–æ—Å—ã–ª–æ–∫\n"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                f"üìç {', '.join(order['distances'])}",
                reply_markup=keyboard
            )
            return True
        except Exception as e:
            logger.error(f"Error sending to courier {courier_id}: {e}")
            return await redirect_order(order['id'])
    return False

async def redirect_order(order_id: str):
    order_data = None
    with open('orders.txt', 'r', encoding='utf-8') as f:
        for line in f:
            if line.startswith(f"{order_id}|"):
                parts = line.strip().split('|')
                order_data = {
                    'id': parts[0],
                    'restaurant': parts[2],
                    'time': parts[3],
                    'packages': parts[4],
                    'distances': parts[5].split(', '),
                    'price': parts[6]
                }
                break
    if not order_data:
        logger.error(f"Order {order_id} not found for redirect")
        return
    courier_id = next_courier()
    if courier_id:
        try:
            await bot.send_message(
                courier_id,
                f"üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ {order_data['id']}!\n"
                f"üè¢ {order_data['restaurant']}\n"
                f"‚è∞ {order_data['time']}\n"
                f"üì¶ {order_data['packages']} –ø–æ—Å—ã–ª–æ–∫\n"
                f"üìç {', '.join(order_data['distances'])}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{order_data['id']}"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"decline_{order_data['id']}")
                ]])
            )
        except Exception as e:
            logger.error(f"Error sending to courier {courier_id}: {e}")
            return await redirect_order(order_id)
    else:
        await bot.send_message(file_operation('admin_id.txt', 'r'), f"‚ùó –ó–∞–∫–∞–∑ {order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω –≤—Å–µ–º–∏!")

async def add_back_button(keyboard):
    if isinstance(keyboard, ReplyKeyboardMarkup):
        keyboard.keyboard.append([KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")])
    return keyboard

@dp.message(lambda message: message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
async def handle_back(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    data = await state.get_data()
    state_flow = {
        'Form:restaurant_name': Form.tariff,
        'Form:tariff': Form.restaurant_password,
        'Form:time': None,
        'Form:packages': Form.time,
        'Form:distance': Form.packages
    }
    if current_state in state_flow:
        if state_flow[current_state] is None:
            await state.clear()
            await show_restaurant_menu(message.from_user.id)
        else:
            await state.set_state(state_flow[current_state])
            await handle_state_return(message, state_flow[current_state])

async def handle_state_return(message: types.Message, return_state: State):
    if return_state == Form.tariff:
        await message.answer(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è:",
            reply_markup=await add_back_button(ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="5/5"), KeyboardButton(text="5/6")],
                    [KeyboardButton(text="6/6"), KeyboardButton(text="6/7")],
                    [KeyboardButton(text="7/7"), KeyboardButton(text="7/8")]
                ],
                resize_keyboard=True
            ))
        )
    elif return_state == Form.restaurant_password:
        await message.answer(
            "üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∑–∞–≤–µ–¥–µ–Ω–∏—è:",
            reply_markup=types.ReplyKeyboardRemove()
        )
    elif return_state == Form.time:
        await message.answer(
            "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
            reply_markup=await add_back_button(ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text=t) for t in ["15 –º–∏–Ω", "20 –º–∏–Ω", "30 –º–∏–Ω", "45 –º–∏–Ω", "1 —á–∞—Å", "1.5 —á–∞—Å–∞", "2 —á–∞—Å–∞"]]
                ],
                resize_keyboard=True
            ))
        )
    elif return_state == Form.packages:
        await message.answer(
            "üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—ã–ª–æ–∫ (1-5):",
            reply_markup=await add_back_button(ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text=str(i)) for i in range(1,6)]],
                resize_keyboard=True
            ))
        )

async def show_restaurant_menu(user_id: int):
    last_order = get_last_order_for_restaurant(user_id)
    buttons = []
    if last_order:
        buttons.append([KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É")])
    buttons.extend([
        [KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑")],
        [KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç")]
    ])
    await bot.send_message(
        user_id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=buttons,
            resize_keyboard=True
        )
    )

def get_restaurant_tariff(user_id: int):
    try:
        row = conn.execute('SELECT tariff FROM restaurants WHERE user_id=?', (user_id,)).fetchone()
        return row[0] if row else '7/8'
    except:
        return '7/8'

@dp.message(Form.restaurant_password)
async def restaurant_auth(message: types.Message, state: FSMContext):
    if message.text == SECRET_PASSWORD:
        await state.set_state(Form.tariff)
        await message.answer(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è:",
            reply_markup=await add_back_button(ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="5/5"), KeyboardButton(text="5/6")],
                    [KeyboardButton(text="6/6"), KeyboardButton(text="6/7")],
                    [KeyboardButton(text="7/7"), KeyboardButton(text="7/8")]
                ],
                resize_keyboard=True
            ))
        )
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")
        await state.clear()

@dp.message(Form.tariff)
async def set_tariff(message: types.Message, state: FSMContext):
    valid_tariffs = ["5/5", "5/6", "6/6", "6/7", "7/7", "7/8"]
    if message.text not in valid_tariffs:
        await message.answer("‚ùó –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ!")
        return
    await state.update_data(tariff=message.text)
    await state.set_state(Form.restaurant_name)
    await message.answer("üè¢ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è:", reply_markup=types.ReplyKeyboardRemove())

@dp.message(Form.restaurant_name)
async def set_restaurant(message: types.Message, state: FSMContext):
    data = await state.get_data()
    tariff = data.get('tariff', '7/8')
    current_date = datetime.now(TIME_ZONE).strftime("%Y-%m-%d")
    conn.execute(
        'INSERT OR REPLACE INTO restaurants VALUES (?, ?, ?, ?)',
        (message.from_user.id, message.text, tariff, current_date)
    )
    conn.commit()
    await state.clear()
    await message.answer(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞—à–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ: {message.text}")
    await show_restaurant_menu(message.from_user.id)

@dp.message(lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑")
async def restaurant_create_order(message: types.Message, state: FSMContext):
    restaurant = conn.execute('SELECT name FROM restaurants WHERE user_id=?', (message.from_user.id,)).fetchone()
    if not restaurant:
        await message.answer("‚ùó –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∑–∞–≤–µ–¥–µ–Ω–∏–µ!")
        return
    await create_order_flow(message, state)

async def create_order_flow(message: types.Message, state: FSMContext, main_order_id: str = None):
    if main_order_id:
        await state.update_data(main_order_id=main_order_id)
    await state.set_state(Form.time)
    await message.answer(
        "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
        reply_markup=await add_back_button(ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text=t) for t in ["15 –º–∏–Ω", "20 –º–∏–Ω", "30 –º–∏–Ω", "45 –º–∏–Ω", "1 —á–∞—Å", "1.5 —á–∞—Å–∞", "2 —á–∞—Å–∞"]]
            ],
            resize_keyboard=True
        ))
    )

@dp.message(Form.time)
async def set_time(message: types.Message, state: FSMContext):
    if message.text in ["15 –º–∏–Ω", "20 –º–∏–Ω", "30 –º–∏–Ω", "45 –º–∏–Ω", "1 —á–∞—Å", "1.5 —á–∞—Å–∞", "2 —á–∞—Å–∞"]:
        await state.update_data(time=message.text)
        await state.set_state(Form.packages)
        await message.answer(
            "üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—ã–ª–æ–∫ (1-5):",
            reply_markup=await add_back_button(ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text=str(i)) for i in range(1,6)]],
                resize_keyboard=True
            ))
        )

@dp.message(Form.packages)
async def set_packages(message: types.Message, state: FSMContext):
    if message.text.isdigit() and 1 <= int(message.text) <= 5:
        await state.update_data(packages=int(message.text), current_package=1, distances=[])
        await ask_distance(message)
        await state.set_state(Form.distance)

async def ask_distance(message: types.Message):
    await message.answer(
        "üìç –£–∫–∞–∂–∏—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ:",
        reply_markup=await add_back_button(ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ë–ª–∏–∂–Ω–µ–µ"), KeyboardButton(text="–î–∞–ª—å–Ω–µ–µ")]],
            resize_keyboard=True
        ))
    )

@dp.message(Form.distance)
async def set_distance(message: types.Message, state: FSMContext):
    if message.text not in ["–ë–ª–∏–∂–Ω–µ–µ", "–î–∞–ª—å–Ω–µ–µ"]:
        await message.answer("‚ùó –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤!")
        return

    data = await state.get_data()
    distances = data.get('distances', [])
    distances.append(message.text)
    current_package = data.get('current_package', 1)
    packages = data.get('packages', 0)

    if current_package < packages:
        await state.update_data(distances=distances, current_package=current_package + 1)
        await ask_distance(message)
    else:
        await state.update_data(distances=distances)
        await create_order(message, state)
        await state.clear()

async def create_order(message: types.Message, state: FSMContext):
    data = await state.get_data()
    main_order_id = data.get('main_order_id')
    
    restaurant = conn.execute('SELECT name FROM restaurants WHERE user_id=?', 
                            (message.from_user.id,)).fetchone()[0]
    
    if main_order_id:
        await update_existing_order(main_order_id, message.from_user.id, data)
        await message.answer("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –∑–∞–∫–∞–∑—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–∞.")
        await state.clear()
        await show_restaurant_menu(message.from_user.id)
        return

    tariff = get_restaurant_tariff(message.from_user.id)
    near_price, far_price = map(int, tariff.split('/'))
    PRICES = {"–ë–ª–∏–∂–Ω–µ–µ": near_price, "–î–∞–ª—å–Ω–µ–µ": far_price}

    order_data = {
        'id': order_id_generator(),
        'user_id': message.from_user.id,
        'restaurant': restaurant,
        'time': data['time'],
        'packages': data['packages'],
        'distances': data['distances'],
        'price': sum(PRICES[d] for d in data['distances'])
    }

    active_couriers = get_active_couriers()
    if not active_couriers:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤! –ó–∞–∫–∞–∑ –Ω–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω.")
        await show_restaurant_menu(message.from_user.id)
        await state.clear()
        return

    await save_order(order_data)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{order_data['id']}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"decline_{order_data['id']}")
    ]])

    if await send_to_courier(order_data, keyboard):
        await message.answer(
            f"‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!\n"
            f"ID: {order_data['id']}\n"
            f"‚è∞ –í—Ä–µ–º—è: {order_data['time']}\n"
            f"üì¶ –ü–æ—Å—ã–ª–æ–∫: {order_data['packages']}\n"
            f"üìç –†–∞—Å—Å—Ç–æ—è–Ω–∏—è: {', '.join(order_data['distances'])}\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {order_data['price']} —Ä—É–±."
        )
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –∫—É—Ä—å–µ—Ä–∞–º!") 
        await remove_order(order_data['id'])

    await show_restaurant_menu(message.from_user.id)

async def remove_order(order_id: str):
    """–£–¥–∞–ª—è–µ—Ç –∑–∞–∫–∞–∑ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        with open('orders.txt', 'r', encoding='utf-8') as f:
            lines = [line for line in f if not line.startswith(f"{order_id}|")]
        
        with open('orders.txt', 'w', encoding='utf-8') as f:
            f.writelines(lines)
    except Exception as e:
        logger.error(f"Error removing order: {e}")

async def send_to_courier(order: dict, keyboard: InlineKeyboardMarkup):
    courier_id = next_courier()
    if courier_id:
        try:
            await bot.send_message(
                courier_id,
                f"üöö –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ {order['id']}!\n"
                f"üè¢ {order['restaurant']}\n"
                f"‚è∞ {order['time']}\n"
                f"üì¶ {order['packages']} –ø–æ—Å—ã–ª–æ–∫\n"
                f"üìç {', '.join(order['distances'])}",
                reply_markup=keyboard
            )
            return True
        except Exception as e:
            logger.error(f"Error sending to courier {courier_id}: {e}")
            return await redirect_order(order['id'])
    return False
    
@dp.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É")
async def add_to_existing_order(message: types.Message, state: FSMContext):
    last_order = get_last_order_for_restaurant(message.from_user.id)
    if last_order:
        await create_order_flow(message, state, last_order['id'])
    else:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
        await show_restaurant_menu(message.from_user.id)


@dp.message(lambda message: message.text == "–ü–û–õ–£–ß–ò–¢–¨ –û–¢–ß–Å–¢")
async def send_report(message: types.Message):
    admin_id = file_operation('admin_id.txt', 'r')
    if str(message.from_user.id) == str(admin_id):
        try:
            report = await generate_report()
            await message.answer(report)
        except Exception as e:
            logger.error(f"Admin report error: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞")
    else:
        await send_restaurant_report(message)


@dp.message(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç")
async def send_restaurant_report(message: types.Message):
    try:
        user_id = message.from_user.id
        restaurant = conn.execute('SELECT name FROM restaurants WHERE user_id=?', (user_id,)).fetchone()
        if not restaurant:
            await message.answer("‚ùó –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∑–∞–≤–µ–¥–µ–Ω–∏–µ!")
            return
        
        report = await generate_restaurant_report(user_id)
        await message.answer(report)
        await show_restaurant_menu(user_id)
    except Exception as e:
        logger.error(f"Restaurant report error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞")


@dp.message(lambda message: message.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä–∞–º–∏")
async def manage_couriers(message: types.Message):
    if str(message.from_user.id) != file_operation('admin_id.txt', 'r'):
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤ (–Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö)
    couriers = conn.execute('''
        SELECT c.user_id, c.name 
        FROM couriers c
        WHERE c.user_id NOT IN (
            SELECT user_id FROM blocked_couriers
        )
        AND c.user_id IN (
            SELECT user_id FROM couriers
            EXCEPT
            SELECT user_id FROM blocked_couriers
        )
    ''').fetchall()

    keyboard = []
    for courier_id, name in couriers:
        keyboard.append([KeyboardButton(text=f"‚ùå –£–¥–∞–ª–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞ {name} (ID: {courier_id})")])

    if not couriers:
        keyboard.append([KeyboardButton(text="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤")])

    keyboard.append([KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")])
    
    await message.answer(
        "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä–∞–º–∏:",
        reply_markup=ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
    )
    
@dp.message(lambda message: message.text.startswith("‚ùå –£–¥–∞–ª–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞"))
async def delete_courier(message: types.Message):
    if str(message.from_user.id) != file_operation('admin_id.txt', 'r'):
        return
    
    try:
        courier_id = int(message.text.split("(ID:")[1].strip(")").strip())
        
        with open('orders.txt', 'r+', encoding='utf-8') as f:
            lines = f.readlines()
            f.seek(0)
            for line in lines:
                parts = line.strip().split('|')
                if len(parts) > 10 and parts[10] == str(courier_id) and parts[7] == 'accepted':
                    restaurant_id = parts[1]
                    order_id = parts[0]
                    await bot.send_message(
                        restaurant_id,
                        f"‚ùå –ó–∞–∫–∞–∑ {order_id} –æ—Ç–º–µ–Ω—ë–Ω, —Ç–∞–∫ –∫–∞–∫ –∫—É—Ä—å–µ—Ä –±—ã–ª —É–¥–∞–ª—ë–Ω"
                    )
                    line = line.replace('|accepted|', '|declined|')
                f.write(line)
            f.truncate()
        
        remove_active_courier(courier_id)
        add_blocked_courier(courier_id)
        
        name = conn.execute('SELECT name FROM couriers WHERE user_id=?', (courier_id,)).fetchone()[0]
        
        await message.answer(
            f"‚úÖ –ö—É—Ä—å–µ—Ä {name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="–ü–û–õ–£–ß–ò–¢–¨ –û–¢–ß–Å–¢")],
                    [KeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä–∞–º–∏")]
                ],
                resize_keyboard=True
            )
        )
        
        try:
            await bot.send_message(
                courier_id,
                "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
            )
        except:
            pass
    except Exception as e:
        logger.error(f"Error deleting courier: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫—É—Ä—å–µ—Ä–∞")
        
@dp.message(lambda message: message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
async def admin_back(message: types.Message):
    admin_id = file_operation('admin_id.txt', 'r')
    if str(message.from_user.id) == str(admin_id):
        try:
            await message.delete()
        except:
            pass
            
        await message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="–ü–û–õ–£–ß–ò–¢–¨ –û–¢–ß–Å–¢")],
                    [KeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä–∞–º–∏")]
                ],
                resize_keyboard=True
            )
        )
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        

@dp.message(lambda message: message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_from_manage_couriers(message: types.Message):
    admin_id = file_operation('admin_id.txt', 'r')
    if str(message.from_user.id) == str(admin_id):
        try:
            await message.delete()
        except:
            pass
            
        await message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="–ü–û–õ–£–ß–ò–¢–¨ –û–¢–ß–Å–¢")],
                    [KeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä–∞–º–∏")]
                ],
                resize_keyboard=True
            )
        )
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        
@dp.message(lambda message: message.text == "–ü–û–õ–£–ß–ò–¢–¨ –û–¢–ß–Å–¢")
async def send_admin_report(message: types.Message):
    admin_id = file_operation('admin_id.txt', 'r')
    if str(message.from_user.id) == str(admin_id):
        try:
            # –û—Ç—á—ë—Ç –∑–∞ –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é
            full_report = await generate_full_history_report()
            await message.answer(full_report)
            
            # –û—Ç—á—ë—Ç –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
            weekly_report = await generate_report()
            await message.answer(f"üìä –û—Ç—á—ë—Ç –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é:\n\n{weekly_report}")
            
        except Exception as e:
            logger.error(f"Admin report error: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞")
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")

@dp.message(Form.courier_password)
async def courier_auth(message: types.Message, state: FSMContext):
    if message.from_user.id in get_blocked_couriers():
        await message.answer("‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        await state.clear()
        return

    if message.text == SECRET_PASSWORD:
        couriers = get_couriers()
        
        if message.from_user.id not in couriers:
            await state.set_state(Form.courier_name)
            await message.answer("üî§ –ü—Ä–∏–¥—É–º–∞–π—Ç–µ —Å–µ–±–µ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ö—É—Ä—å–µ—Ä –ñ–µ–Ω—è):")
        else:
            reply_markup = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="–ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É")]],
                resize_keyboard=True
            )
            await message.answer("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=reply_markup)
            await state.clear()
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")
        await state.clear()

@dp.message(Form.courier_name)
async def set_courier_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    if len(name) < 2 or len(name) > 30:
        await message.answer("‚ùó –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    current_date = datetime.now(TIME_ZONE).strftime("%Y-%m-%d")
    conn.execute(
        'INSERT OR REPLACE INTO couriers VALUES (?, ?, ?)',
        (message.from_user.id, name, current_date)
    )
    conn.commit()
    
    file_operation('courier_id.txt', 'a', message.from_user.id)
    await message.answer(
        f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞—à–µ –∏–º—è: {name}",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É")]],
            resize_keyboard=True
        )
    )
    await state.clear()


async def generate_report():
    try:
        end_date = datetime.now(TIME_ZONE)
        start_date = end_date - timedelta(days=7)
        
        report_data = {
            'restaurants': {},
            'couriers': {},
            'total_packages': 0,  # –ò–∑–º–µ–Ω–∏–ª–∏ —Å total_orders –Ω–∞ total_packages
            'total_price': 0,
            'delivered_packages': 0  # –ò–∑–º–µ–Ω–∏–ª–∏ —Å delivered_orders –Ω–∞ delivered_packages
        }

        with open('orders.txt', 'r', encoding='utf-8') as f:
            for line in f:
                parts = line.strip().split('|')
                if len(parts) < 11:
                    continue
                
                try:
                    order_date = datetime.strptime(parts[8], "%Y-%m-%d").replace(tzinfo=TIME_ZONE)
                except:
                    continue
                
                if start_date <= order_date <= end_date:
                    restaurant = parts[2]
                    courier_id = parts[10] if len(parts) > 10 else None
                    status = parts[7]
                    packages = int(parts[4]) if parts[4].isdigit() else 0
                    price = int(parts[6]) if parts[6].isdigit() else 0
                    
                    if restaurant not in report_data['restaurants']:
                        report_data['restaurants'][restaurant] = {
                            'packages': 0,  # –ò–∑–º–µ–Ω–∏–ª–∏ —Å orders –Ω–∞ packages
                            'price': 0,
                            'delivered': 0
                        }
                    
                    report_data['restaurants'][restaurant]['packages'] += packages
                    report_data['restaurants'][restaurant]['price'] += price
                    if status == 'delivered':
                        report_data['restaurants'][restaurant]['delivered'] += packages
                    
                    if courier_id and courier_id != 'None':
                        courier_name = conn.execute(
                            'SELECT name FROM couriers WHERE user_id=?', 
                            (courier_id,)
                        ).fetchone()
                        courier_name = courier_name[0] if courier_name else f"–ö—É—Ä—å–µ—Ä {courier_id}"
                        
                        if courier_name not in report_data['couriers']:
                            report_data['couriers'][courier_name] = {
                                'packages': 0,  # –ò–∑–º–µ–Ω–∏–ª–∏ —Å orders –Ω–∞ packages
                                'price': 0
                            }
                        
                        report_data['couriers'][courier_name]['packages'] += packages
                        report_data['couriers'][courier_name]['price'] += price
                    
                    report_data['total_packages'] += packages
                    report_data['total_price'] += price
                    if status == 'delivered':
                        report_data['delivered_packages'] += packages

        report_text = (
            f"üìä –û–¢–ß–Å–¢ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê\n"
            f"–ü–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}\n"
            f"–í—Å–µ–≥–æ –ø–æ—Å—ã–ª–æ–∫: {report_data['total_packages']}\n"  # –ò–∑–º–µ–Ω–∏–ª–∏ –≤—ã–≤–æ–¥
            f"–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ—Å—ã–ª–æ–∫: {report_data['delivered_packages']}\n"  # –ò–∑–º–µ–Ω–∏–ª–∏ –≤—ã–≤–æ–¥
            f"–û–±—â–∞—è —Å—É–º–º–∞: {report_data['total_price']} —Ä—É–±.\n\n"
        )
        
        report_text += "üè¢ –ó–ê–í–ï–î–ï–ù–ò–Ø:\n"
        for restaurant, data in report_data['restaurants'].items():
            report_text += (
                f"‚ñ´Ô∏è {restaurant}:\n"
                f"   - –ü–æ—Å—ã–ª–æ–∫: {data['packages']}\n"  # –ò–∑–º–µ–Ω–∏–ª–∏ –≤—ã–≤–æ–¥
                f"   - –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {data['delivered']}\n"
                f"   - –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {data['price']} —Ä—É–±.\n"
            )
        
        report_text += "\nüöö –ö–£–†–¨–ï–†–´:\n"
        for courier, data in report_data['couriers'].items():
            report_text += (
                f"‚ñ´Ô∏è {courier}:\n"
                f"   - –ü–æ—Å—ã–ª–æ–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {data['packages']}\n"  # –ò–∑–º–µ–Ω–∏–ª–∏ –≤—ã–≤–æ–¥
                f"   - –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {data['price']} —Ä—É–±.\n"
            )
        
        return report_text if report_data['total_packages'] > 0 else "‚ùó –ó–∞ –Ω–µ–¥–µ–ª—é –ø–æ—Å—ã–ª–æ–∫ –Ω–µ –±—ã–ª–æ"
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞: {e}")
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç"
        
async def generate_full_history_report():
    try:
        total_packages = 0  # –ò–∑–º–µ–Ω–∏–ª–∏ —Å total_orders
        total_price = 0
        restaurants = {}
        couriers = {}
        
        with open('orders.txt', 'r', encoding='utf-8') as f:
            for line in f:
                parts = line.strip().split('|')
                if len(parts) < 11:
                    continue
                
                restaurant = parts[2]
                courier_id = parts[10] if len(parts) > 10 else None
                packages = int(parts[4]) if parts[4].isdigit() else 0  # –î–æ–±–∞–≤–∏–ª–∏ –ø–æ–¥—Å—á–µ—Ç –ø–æ—Å—ã–ª–æ–∫
                price = int(parts[6]) if parts[6].isdigit() else 0
                
                if restaurant not in restaurants:
                    restaurants[restaurant] = {
                        'packages': 0,
                        'price': 0
                    }
                restaurants[restaurant]['packages'] += packages
                restaurants[restaurant]['price'] += price
                
                if courier_id and courier_id != 'None':
                    courier_name = conn.execute(
                        'SELECT name FROM couriers WHERE user_id=?', 
                        (courier_id,)
                    ).fetchone()
                    courier_name = courier_name[0] if courier_name else f"–ö—É—Ä—å–µ—Ä {courier_id}"
                    
                    if courier_name not in couriers:
                        couriers[courier_name] = {
                            'packages': 0,
                            'price': 0
                        }
                    couriers[courier_name]['packages'] += packages
                    couriers[courier_name]['price'] += price
                
                total_packages += packages
                total_price += price
        
        report_text = (
            f"üìä –ü–û–õ–ù–´–ô –û–¢–ß–Å–¢ (–í–°–Ø –ò–°–¢–û–†–ò–Ø)\n"
            f"–í—Å–µ–≥–æ –ø–æ—Å—ã–ª–æ–∫: {total_packages}\n"  # –ò–∑–º–µ–Ω–∏–ª–∏ –≤—ã–≤–æ–¥
            f"–û–±—â–∞—è —Å—É–º–º–∞: {total_price} —Ä—É–±.\n\n"
        )
        
        report_text += "üè¢ –ó–ê–í–ï–î–ï–ù–ò–Ø:\n"
        for restaurant, data in restaurants.items():
            report_text += (
                f"‚ñ´Ô∏è {restaurant}:\n"
                f"   - –ü–æ—Å—ã–ª–æ–∫: {data['packages']}\n"  # –ò–∑–º–µ–Ω–∏–ª–∏ –≤—ã–≤–æ–¥
                f"   - –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {data['price']} —Ä—É–±.\n"
            )
        
        report_text += "\nüöö –ö–£–†–¨–ï–†–´:\n"
        for courier, data in couriers.items():
            report_text += (
                f"‚ñ´Ô∏è {courier}:\n"
                f"   - –ü–æ—Å—ã–ª–æ–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {data['packages']}\n"  # –ò–∑–º–µ–Ω–∏–ª–∏ –≤—ã–≤–æ–¥
                f"   - –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {data['price']} —Ä—É–±.\n"
            )
        
        return report_text if total_packages > 0 else "‚ùó –ü–æ—Å—ã–ª–æ–∫ –µ—â—ë –Ω–µ –±—ã–ª–æ"
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞: {e}")
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç"
        
        

async def generate_restaurant_report(user_id: int):
    try:
        report_data = {
            'packages': 0,
            'price': 0,
            'accepted_packages': 0,  # –î–æ–±–∞–≤–∏–ª–∏
            'declined_packages': 0,  # –î–æ–±–∞–≤–∏–ª–∏
            'pending_packages': 0,   # –î–æ–±–∞–≤–∏–ª–∏
            'delivered_packages': 0
        }

        today = datetime.now(TIME_ZONE).strftime("%Y-%m-%d")
        restaurant_name = conn.execute('SELECT name FROM restaurants WHERE user_id=?', (user_id,)).fetchone()[0]
        
        with open('orders.txt', 'r', encoding='utf-8') as f:
            for line in f:
                parts = line.strip().split('|')
                if len(parts) < 11:
                    continue
                if int(parts[1]) == user_id and parts[8] == today:
                    packages = int(parts[4]) if parts[4].isdigit() else 0
                    price = int(parts[6]) if parts[6].isdigit() else 0
                    status = parts[7]
                    
                    report_data['packages'] += packages
                    report_data['price'] += price
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å—á–µ—Ç –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º —Å —É—á–µ—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—ã–ª–æ–∫
                    if status == 'accepted':
                        report_data['accepted_packages'] += packages
                    elif status == 'declined':
                        report_data['declined_packages'] += packages
                    elif status == 'pending':
                        report_data['pending_packages'] += packages
                    elif status == 'delivered':
                        report_data['delivered_packages'] += packages
        
        report_text = (
            f"üìã –û—Ç—á—ë—Ç –∑–∞–≤–µ–¥–µ–Ω–∏—è {restaurant_name} –∑–∞ {datetime.now(TIME_ZONE).strftime('%d.%m.%Y')}:\n\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Å—ã–ª–æ–∫: {report_data['packages']}\n"
            f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {report_data['price']} —Ä—É–±.\n"
            f"‚Ä¢ –ü—Ä–∏–Ω—è—Ç–æ –∫—É—Ä—å–µ—Ä–∞–º–∏: {report_data['accepted_packages']} –ø–æ—Å—ã–ª–æ–∫\n"
            f"‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∫—É—Ä—å–µ—Ä–∞–º–∏: {report_data['declined_packages']} –ø–æ—Å—ã–ª–æ–∫\n"
            f"‚Ä¢ –û–∂–∏–¥–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏—è: {report_data['pending_packages']} –ø–æ—Å—ã–ª–æ–∫\n"
            f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {report_data['delivered_packages']} –ø–æ—Å—ã–ª–æ–∫\n"
        )
        
        return report_text if report_data['packages'] > 0 else "‚ùó –ó–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ—Å—ã–ª–æ–∫ –Ω–µ –±—ã–ª–æ"
    except Exception as e:
        logger.error(f"Restaurant report generation error: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç"

def get_last_order_for_restaurant(user_id: int):
    try:
        if not os.path.exists('orders.txt'):
            return None
        with open('orders.txt', 'r', encoding='utf-8') as f:
            lines = f.readlines()
            for line in reversed(lines):
                parts = line.strip().split('|')
                if len(parts) >= 11 and int(parts[1]) == user_id and parts[7] == 'accepted':
                    return {'id': parts[0], 'courier_id': parts[10]}
        return None
    except Exception as e:
        logger.error(f"Error getting last order: {e}")
        return None


def get_courier_for_order(order_id: str):
    try:
        with open('orders.txt', 'r', encoding='utf-8') as f:
            for line in f:
                if line.startswith(f"{order_id}|"):
                    parts = line.strip().split('|')
                    return int(parts[10]) if parts[10] != 'None' else None
    except Exception:
        return None


async def check_order_status(order_id: str) -> str:
    with open('orders.txt', 'r', encoding='utf-8') as f:
        for line in f:
            if line.startswith(f"{order_id}|"):
                parts = line.strip().split('|')
                return parts[7]
    return 'not_found'


async def remind_courier(order_id: str):
    await asyncio.sleep(9999)
    if await check_order_status(order_id) == 'pending':
        await redirect_order(order_id)
        if admin_id := file_operation('admin_id.txt', 'r'):
            await bot.send_message(
                admin_id,
                f"‚ùó –ó–∞–∫–∞–∑ {order_id} –Ω–µ –±—ã–ª –ø—Ä–∏–Ω—è—Ç –≤–æ–≤—Ä–µ–º—è! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω —Å–ª–µ–¥—É—é—â–µ–º—É –∫—É—Ä—å–µ—Ä—É."
            )


async def update_existing_order(order_id: str, user_id: int, data: dict):
    try:
        tariff = get_restaurant_tariff(user_id)
        near_price, far_price = map(int, tariff.split('/'))
        PRICES = {"–ë–ª–∏–∂–Ω–µ–µ": near_price, "–î–∞–ª—å–Ω–µ–µ": far_price}

        pending_updates[order_id] = {
            'added_packages': data['packages'],
            'added_distances': data['distances'],
            'added_price': sum(PRICES[d] for d in data['distances'])
        }
        
        courier_id = get_courier_for_order(order_id)
        if courier_id:
            try:
                await bot.send_message(
                    courier_id,
                    f"‚ûï –ö –∑–∞–∫–∞–∑—É {order_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ:\n"
                    f"–ü–æ—Å—ã–ª–∫–∏: {data['packages']}\n"
                    f"–†–∞—Å—Å—Ç–æ—è–Ω–∏—è: {', '.join(data['distances'])}",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{order_id}"),
                        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{order_id}")
                    ]])
                )
            except Exception as e:
                logger.error(f"Error sending to courier: {e}")
                await bot.send_message(
                    user_id,
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑."
                )
    except Exception as e:
        logger.error(f"Error in update_existing_order: {e}")
        
@dp.callback_query(lambda c: c.data.startswith(('confirm_', 'cancel_')))
async def handle_additional_packages(callback: types.CallbackQuery):
    action, order_id = callback.data.split('_', 1)

    if order_id not in pending_updates:
        await callback.answer("‚ùó –ò–∑–º–µ–Ω–µ–Ω–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
        return

    update_data = pending_updates.pop(order_id)

    try:
        with open('orders.txt', 'r', encoding='utf-8') as f:
            parts = None
            for line in f:
                if line.startswith(f"{order_id}|"):
                    parts = line.strip().split('|')
                    break
            
            if not parts:
                raise Exception("Order not found")
            
            restaurant_id = int(parts[1])
        
        if action == 'confirm':
            new_packages = int(parts[4]) + update_data['added_packages']
            new_distances = parts[5] + ', ' + ', '.join(update_data['added_distances'])
            new_price = int(parts[6]) + update_data['added_price']
            
            with open('orders.txt', 'r+', encoding='utf-8') as f:
                lines = []
                for line in f:
                    if line.startswith(f"{order_id}|"):
                        new_line = (
                            f"{parts[0]}|{parts[1]}|{parts[2]}|{parts[3]}|"
                            f"{new_packages}|{new_distances}|{new_price}|"
                            f"{parts[7]}|{parts[8]}|{parts[9]}|{parts[10]}"
                        )
                        lines.append(new_line + '\n')
                    else:
                        lines.append(line)
                
                f.seek(0)
                f.writelines(lines)
                f.truncate()
            
            await callback.answer("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Å—ã–ª–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã!")
            await bot.send_message(
                restaurant_id,
                f"‚úÖ –ö—É—Ä—å–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫ –∑–∞–∫–∞–∑—É {order_id}"
            )
        else:
            await callback.answer("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã!")
            await bot.send_message(
                restaurant_id,
                f"‚ùå –ö—É—Ä—å–µ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫ –∑–∞–∫–∞–∑—É {order_id}"
            )
        
        await callback.message.delete()
    except Exception as e:
        logger.error(f"Error processing additional packages: {e}")
        await callback.answer("‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        
@dp.callback_query(lambda c: c.data.startswith('accept_'))
async def handle_order_accept(callback: types.CallbackQuery):
    order_id = callback.data.split('_', 1)[1]
    courier_id = callback.from_user.id

    await update_order_status(order_id, 'accepted', courier_id)

    try:
        with open('orders.txt', 'r', encoding='utf-8') as f:
            for line in f:
                if line.startswith(f"{order_id}|"):
                    parts = line.strip().split('|')
                    restaurant_id = int(parts[1])
                    break
        
        await bot.send_message(
            restaurant_id,
            f"‚úÖ –ó–∞–∫–∞–∑ {order_id} –ø—Ä–∏–Ω—è—Ç –∫—É—Ä—å–µ—Ä–æ–º @{callback.from_user.username}"
        )
        
        await callback.message.edit_reply_markup(
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üöö –ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω", callback_data=f"delivered_{order_id}")
            ]])
        )
        
        await callback.answer(f"–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑ {order_id}")
    except Exception as e:
        logger.error(f"Error updating message: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
@dp.callback_query(lambda c: c.data.startswith('decline_'))
async def handle_order_decline(callback: types.CallbackQuery):
    order_id = callback.data.split('_', 1)[1]

    await update_order_status(order_id, 'declined')
    await callback.message.delete()
    await callback.answer(f"–ó–∞–∫–∞–∑ {order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω")
    await redirect_order(order_id)


@dp.callback_query(lambda c: c.data.startswith('delivered_'))
async def handle_delivery_confirmation(callback: types.CallbackQuery):
    order_id = callback.data.split('_', 1)[1]

    await update_order_status(order_id, 'delivered')

    try:
        with open('orders.txt', 'r', encoding='utf-8') as f:
            for line in f:
                if line.startswith(f"{order_id}|"):
                    parts = line.strip().split('|')
                    restaurant_id = int(parts[1])
                    break
        
        await bot.send_message(
            restaurant_id,
            f"üöö –ó–∞–∫–∞–∑ {order_id} –±—ã–ª –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!"
        )
        
        await callback.message.delete()
        await callback.answer(f"–ó–∞–∫–∞–∑ {order_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π")
    except Exception as e:
        logger.error(f"Delivery confirmation error: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")


@dp.message(lambda message: message.text == "–ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É")
async def start_shift(message: types.Message):
    if message.from_user.id in get_blocked_couriers():
        await message.answer("‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫—É—Ä—å–µ—Ä–æ–º.")
        return

    add_active_courier(message.from_user.id)

    await message.answer(
        "‚úÖ –°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã.",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É")]],
            resize_keyboard=True
        )
    )


@dp.message(lambda message: message.text == "–ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É")
async def end_shift(message: types.Message):
    remove_active_courier(message.from_user.id)

    await message.answer(
        "‚úÖ –°–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞! –ó–∞–∫–∞–∑—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –ø–æ—Å—Ç—É–ø–∞—Ç—å.",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É")]],
            resize_keyboard=True
        )
    )


@dp.message(CommandStart())
async def start(message: types.Message, state: FSMContext):
    admin_id = file_operation('admin_id.txt', 'r')
    if str(message.from_user.id) == str(admin_id):
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="–ü–û–õ–£–ß–ò–¢–¨ –û–¢–ß–Å–¢")],
                    [KeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä–∞–º–∏")]
                ],
                resize_keyboard=True
            )
        )
        return

    couriers = get_couriers()
    if message.from_user.id in couriers:
        if message.from_user.id in get_active_couriers():
            markup = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É")]],
                resize_keyboard=True
            )
        else:
            markup = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="–ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É")]],
                resize_keyboard=True
            )
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∑–∞–¥!", reply_markup=markup)
        return

    restaurant = conn.execute('SELECT name FROM restaurants WHERE user_id=?', (message.from_user.id,)).fetchone()
    if restaurant:
        await show_restaurant_menu(message.from_user.id)
        return

    await state.set_state(Form.role)
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫—É—Ä—å–µ—Ä–∞")],
                [KeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏—è")],
                [KeyboardButton(text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")]
            ],
            resize_keyboard=True
        )
    )

@dp.message(Form.role)
async def process_role(message: types.Message, state: FSMContext):
    if message.text not in ["–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫—É—Ä—å–µ—Ä–∞", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏—è", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"]:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é")
        return

    if message.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫—É—Ä—å–µ—Ä–∞":
        await state.set_state(Form.courier_password)
        await message.answer(
            "üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫—É—Ä—å–µ—Ä–∞:",
            reply_markup=types.ReplyKeyboardRemove()
        )
    elif message.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏—è":
        await state.set_state(Form.restaurant_password)
        await message.answer(
            "üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ–¥–µ–Ω–∏—è:",
            reply_markup=types.ReplyKeyboardRemove()
        )
    elif message.text == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä":
        await state.set_state(Form.admin_password)
        await message.answer(
            "üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=types.ReplyKeyboardRemove()
        )

@dp.message(Form.courier_password)
async def courier_auth(message: types.Message, state: FSMContext):
    if message.text == SECRET_PASSWORD:
        await state.set_state(Form.courier_name)
        await message.answer("üî§ –ü—Ä–∏–¥—É–º–∞–π—Ç–µ —Å–µ–±–µ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ö—É—Ä—å–µ—Ä –ñ–µ–Ω—è):")
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")
        await state.clear()

@dp.message(Form.restaurant_password)
async def restaurant_auth(message: types.Message, state: FSMContext):
    if message.text == SECRET_PASSWORD:
        await state.set_state(Form.restaurant_name)
        await message.answer("üè¢ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è:")
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")
        await state.clear()
        
@dp.message(Form.admin_password)
async def admin_auth(message: types.Message, state: FSMContext):
    if message.text == ADMIN_PASSWORD:
        file_operation('admin_id.txt', 'w', message.from_user.id)
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="–ü–û–õ–£–ß–ò–¢–¨ –û–¢–ß–Å–¢")],
                    [KeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—å–µ—Ä–∞–º–∏")]
                ],
                resize_keyboard=True
            )
        )
        await state.clear()
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")
        await state.clear()


async def schedule_cleanup():
    while True:
        now = datetime.now(TIME_ZONE)
        if now.hour == 23 and now.minute == 59:
            with open('orders.txt', 'w') as f:
                f.truncate()
            logger.info("Daily orders cleanup performed")
        await asyncio.sleep(60)


async def send_weekly_report():
    while True:
        now = datetime.now(TIME_ZONE)
        
        days_until_monday = (7 - now.weekday()) % 7
        if days_until_monday == 0 and now.hour >= 9:
            days_until_monday = 7  
        
        target_time = now.replace(hour=9, minute=0, second=0, microsecond=0) + timedelta(days=days_until_monday)
        wait_seconds = (target_time - now).total_seconds()
        
        await asyncio.sleep(wait_seconds)
        
        try:
            report = await generate_report()
            
            admin_id = file_operation('admin_id.txt', 'r')
            if admin_id:
                await bot.send_message(admin_id, f"üìÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç:\n\n{report}")
            
            restaurants = conn.execute('SELECT user_id, name FROM restaurants').fetchall()
            for user_id, name in restaurants:
                try:
                    restaurant_report = await generate_restaurant_report(user_id)
                    await bot.send_message(user_id, f"üìÖ –í–∞—à–∞ –Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n{restaurant_report}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–∞ –∑–∞–≤–µ–¥–µ–Ω–∏—é {name}: {e}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞: {e}")


@dp.message()
async def handle_unprocessed(message: types.Message):
    await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º")


async def on_startup():
    asyncio.create_task(schedule_cleanup())
    asyncio.create_task(send_weekly_report())

from fastapi import FastAPI
import uvicorn
import multiprocessing
import logging

app = FastAPI()

@app.get("/")
async def wakeup():
    return {"status": "Bot is alive"}

def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ"""
    from aiogram import Dispatcher
    import asyncio
    
    async def start_polling():
        await dp.start_polling(bot)
    
    asyncio.run(start_polling())

def run_http():
    """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞"""
    uvicorn.run(app, host="0.0.0.0", port=10000)

if __name__ == '__main__':
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
    bot_process = multiprocessing.Process(target=run_bot)
    bot_process.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
    try:
        run_http()
    except KeyboardInterrupt:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    finally:
        bot_process.terminate()
        bot_process.join()